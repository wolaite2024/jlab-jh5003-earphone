/**
*****************************************************************************************
*     Copyright(c) 2015, Realtek Semiconductor Corporation. All rights reserved.
*****************************************************************************************
  * @file     transmit_service.h
  * @brief    Head file for using dualmode service.
  * @details
  * @author   jane
  * @date     2015-5-12
  * @version  v0.1
  * *************************************************************************************
  */

/* Define to prevent recursive inclusion */
#ifndef _TRANSMIT_SRV_H_
#define _TRANSMIT_SRV_H_

#ifdef  __cplusplus
extern "C" {
#endif      /* __cplusplus */

/* Add Includes here */
#if F_APP_GATT_SERVER_EXT_API_SUPPORT
#include <profile_server_ext.h>
#else
#include <profile_server.h>
#endif
/** @defgroup TRANSMIT_SERVICE Transmit Service
  * @brief Transmit service
  * @details

    The Transmit Service is a user-defined service, it is used to help transmit data only.

    Application shall registger transmit service when initialization through @ref transmit_srv_add function.

    Application can send data through @ref transmit_srv_tx_data function.

  * <b>Example usage</b>
  * \code{.c}
     void app_transmit_data(uint8_t conn_id, T_SERVER_ID srv_id, uint8_t *tx_data)
     {
        ...
        //transmit data
        transmit_srv_tx_data(conn_id, srv_id, sizeof(tx_data), tx_data);
        ...
  *  }
  * \endcode

  * @{
  */
/*============================================================================*
 *                              Macros
 *============================================================================*/
/** @defgroup TRANSMIT_SERVICE_Exported_Macros Transmit Service Exported Macros
  * @brief
  * @{
  */

/** @defgroup TRANSMIT_SERVICE_Upstream_Message TRANSMIT_SERVICE Upstream Message
  * @brief  Upstream message used to inform application.
  * @{
  */
#define TRANSMIT_SVC_TX_DATA_CCCD_ENABLE  1
#define TRANSMIT_SVC_TX_DATA_CCCD_DISABLE  2

#define TRANSMIT_SVC_RX_DATA_INDEX              2 /**< @brief Index for Transmit Service rx chars's value */
#define TRANSMIT_SVC_TX_DATA_INDEX              4 /**< @brief Index for Transmit Service tx chars's value */
#define TRANSMIT_SVC_TX_DATA_CCCD_INDEX         5 /**< @brief Index for Transmit Service tx chars's CCCD value */
#define TRANSMIT_SVC_DEVICE_INFO_INDEX          7 /**< @brief Index for Transmit Service device info chars's value */

#define TRANSMIT_SVC_DEVICE_INFO_MAX_NAME_LEN   40 /**< @brief max name length for ble device info */
/** @} End of TRANSMIT_SERVICE_Upstream_Message */

/** @} End of TRANSMIT_SERVICE_Exported_Macros */

/*============================================================================*
 *                              Types
 *============================================================================*/
/** @defgroup TRANSMIT_SERVICE_Exported_Types Transmit Service Exported Types
  * @brief
  * @{
  */
/* Add all public types here */
/** @defgroup TRANSMIT_SERVICE_Callback_Data Transmit Service Callback Data
  * @brief Transmit service data struct for notification data to application.
  * @{
  */
typedef struct
{
    uint16_t len;
    uint8_t *p_value;
} T_RX_DATA;

typedef struct
{
    uint8_t  bd_addr[6];
    uint8_t  device_type;
    uint8_t  res;
    uint8_t  device_name[TRANSMIT_SVC_DEVICE_INFO_MAX_NAME_LEN];
} T_TRANSMIT_SRV_DEVICE_INFO;

/** Message content: @ref TRANSMIT_SERVICE_Upstream_Message */
typedef union
{
    uint8_t notification_indification_value;
    T_RX_DATA rx_data;
    T_TRANSMIT_SRV_DEVICE_INFO device_info;
} T_TRANSMIT_SRV_MSG_DATA;

/** Transmit service data to inform application */
typedef struct
{
    T_SERVICE_CALLBACK_TYPE  msg_type;

    uint16_t                 conn_handle;
    uint16_t                 cid;

    uint8_t                  conn_id;

    uint8_t                  attr_index;
    T_TRANSMIT_SRV_MSG_DATA  msg_data;
    T_GAP_CHANN_TYPE         chann_type;
} T_TRANSMIT_SRV_CALLBACK_DATA;
/** @} */

/** @} End of TRANSMIT_SERVICE_Exported_Types */
/*============================================================================*
 *                              Functions
 *============================================================================*/
/** @defgroup TRANSMIT_SERVICE_Exported_Functions Transmit Service Exported Functions
  * @brief
  * @{
  */

/**
  * @brief Add transmit service to the BLE stack database.
  *
  * @param[in]   p_func_cb  Callback when service attribute was read, write or cccd update.
  * @return Service id generated by the BLE stack: @ref T_SERVER_ID.
  * @retval 0xFF Operation failure.
  * @retval others Service id assigned by stack.
  *
  */
T_SERVER_ID transmit_srv_add(void *p_func_cb);

/**
    * @brief    Send notification to peer side
    * @param    conn_handle  connection handle of current ACL link
    * @param    cid          L2cap channel id
    * @param    p_data  value to be send to peer
    * @param    data_len  data length of the value to be send
    * @return   void
    * <b>Example usage</b>
    * \code{.c}
    *   //case1:call transmit_srv_tx_data() in xxx_write_cb()
        static T_APP_RESULT transmit_srv_write_cb(uint16_t conn_handle, uint16_t cid, T_SERVER_ID service_id,
                                              uint16_t attr_index, T_WRITE_TYPE write_type, uint16_t length,
                                              uint8_t *p_value, P_FUN_EXT_WRITE_IND_POST_PROC  *p_write_ind_post_proc)
        {
            ......
            transmit_srv_tx_data(conn_handle, cid, p_data, data_len);
            ......
        }

        //case2:call transmit_srv_tx_data() in xxx_read_cb()
        static T_APP_RESULT transmit_read_cb(uint16_t conn_handle, uint16_t cid,
                                             T_SERVER_ID service_id,
                                             uint16_t attr_index,
                                             uint16_t offset, uint16_t *p_length, uint8_t **pp_value)
        {
            ......
            transmit_srv_tx_data(conn_handle, cid, p_data, data_len);
            ......
        }

        //case3:call transmit_srv_tx_data() when can not directly get conn_handle and cid
        void test()
        {
            uint8_t remote_bd_addr[6];
            T_GAP_REMOTE_ADDR_TYPE remote_bd_type;
            uint16_t cid;
            uint8_t cid_num;
            uint16_t conn_handle;
            gap_chann_get_handle(remote_bd_addr, remote_bd_type, &conn_handle);
            gap_chann_get_cid(conn_handle, 1, &cid, &cid_num);
            transmit_srv_tx_data(conn_handle, cid, p_data, data_len);
        }
    * \endcode
    */
bool transmit_srv_tx_data(uint16_t conn_handle, uint16_t cid, uint16_t len, uint8_t *p_value);

/** @} End of TRANSMIT_SERVICE_Exported_Functions */

/** @} End of TRANSMIT_SERVICE */

#ifdef  __cplusplus
}
#endif      /*  __cplusplus */

#endif  /* _TRANSMIT_SRV_H_ */
