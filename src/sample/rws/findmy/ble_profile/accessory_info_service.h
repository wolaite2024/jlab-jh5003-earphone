#ifndef ais_h
#define ais_h

#if F_APP_GATT_SERVER_EXT_API_SUPPORT
#include "profile_server_ext.h"
#else
#include "profile_server.h"
#endif

#define FMNA_AIS_PRODUCT_DATA_INDEX                     2
#define FMNA_AIS_MANU_NAME_INDEX                        4
#define FMNA_AIS_MODEL_NAME_INDEX                       6
#define FMNA_AIS_ACCESSORY_CATEGORY_INDEX               8
#define FMNA_AIS_ACCESSORY_CAPABILITY_INDEX             10
#define FMNA_AIS_FIRMWARE_VERSION_INDEX                 12
#define FMNA_AIS_FINDMY_VERSION_INDEX                   14
#define FMNA_AIS_BATTERY_TYPE_INDEX                     16
#define FMNA_AIS_BATTERY_LEVEL_INDEX                    18

#define  GATT_UUID128_PROD_DATA             0x0B, 0xBB, 0x6F, 0x41, 0x3A, 0x00, 0xB4, 0xA7, 0x57, 0x4D, 0x52, 0x63, 0x01, 0x00, 0xA5, 0x6A
#define  GATT_UUID128_MANU_NAME             0x0B, 0xBB, 0x6F, 0x41, 0x3A, 0x00, 0xB4, 0xA7, 0x57, 0x4D, 0x52, 0x63, 0x02, 0x00, 0xA5, 0x6A
#define  GATT_UUID128_MODEL_NAME            0x0B, 0xBB, 0x6F, 0x41, 0x3A, 0x00, 0xB4, 0xA7, 0x57, 0x4D, 0x52, 0x63, 0x03, 0x00, 0xA5, 0x6A
#define  GATT_UUID128_RESERVED              0x0B, 0xBB, 0x6F, 0x41, 0x3A, 0x00, 0xB4, 0xA7, 0x57, 0x4D, 0x52, 0x63, 0x04, 0x00, 0xA5, 0x6A
#define  GATT_UUID128_ACC_CATEGORY          0x0B, 0xBB, 0x6F, 0x41, 0x3A, 0x00, 0xB4, 0xA7, 0x57, 0x4D, 0x52, 0x63, 0x05, 0x00, 0xA5, 0x6A
#define  GATT_UUID128_ACC_CAP               0x0B, 0xBB, 0x6F, 0x41, 0x3A, 0x00, 0xB4, 0xA7, 0x57, 0x4D, 0x52, 0x63, 0x06, 0x00, 0xA5, 0x6A
#define  GATT_UUID128_FW_VERS               0x0B, 0xBB, 0x6F, 0x41, 0x3A, 0x00, 0xB4, 0xA7, 0x57, 0x4D, 0x52, 0x63, 0x07, 0x00, 0xA5, 0x6A
#define  GATT_UUID128_FINDMY_VERS           0x0B, 0xBB, 0x6F, 0x41, 0x3A, 0x00, 0xB4, 0xA7, 0x57, 0x4D, 0x52, 0x63, 0x08, 0x00, 0xA5, 0x6A
#define  GATT_UUID128_BATT_TYPE             0x0B, 0xBB, 0x6F, 0x41, 0x3A, 0x00, 0xB4, 0xA7, 0x57, 0x4D, 0x52, 0x63, 0x09, 0x00, 0xA5, 0x6A
#define  GATT_UUID128_BATT_LVL              0x0B, 0xBB, 0x6F, 0x41, 0x3A, 0x00, 0xB4, 0xA7, 0x57, 0x4D, 0x52, 0x63, 0x0A, 0x00, 0xA5, 0x6A

typedef union
{
    uint8_t read_value_index;
} T_AIS_UPSTREAM_MSG_DATA;

typedef struct
{
    uint8_t                 conn_id;
#if F_APP_GATT_SERVER_EXT_API_SUPPORT
    uint16_t                conn_handle;
    uint16_t                cid;
#endif

    T_SERVICE_CALLBACK_TYPE msg_type;
    T_AIS_UPSTREAM_MSG_DATA msg_data;
} T_AIS_CALLBACK_DATA;

typedef enum
{
    AIS_PARAM_PROD_DATA = 0x01,
    AIS_PARAM_MANU_NAME = 0x02,
    AIS_PARAM_MODEL_NAME = 0x03,
    AIS_PARAM_RESERVED = 0x04,
    AIS_PARAM_ACC_CATEGORY = 0x05,
    AIS_PARAM_ACC_CAP = 0x06,
    AIS_PARAM_FW_VERS = 0x07,
    AIS_PARAM_FINDMY_VERS = 0x08,
    AIS_PARAM_BATT_TYPE = 0x09,
    AIS_PARAM_BATT_LVL = 0x0A,
} T_AIS_PARAM_TYPE;

typedef enum
{
    ACC_CAPABILITY_SUPT_PLAY_SOUND = 0x00000001,
    ACC_CAPABILITY_SUPT_MOTION_DETECT_UT = 0x00000002,
    ACC_CAPABILITY_SUPT_SRNM_LOOKUP_NFC = 0x00000004,
    ACC_CAPABILITY_SUPT_SRNM_LOOKUP_BLE = 0x00000008,
    ACC_CAPABILITY_SUPT_FW_UPDATE_SERVICE = 0x00000010,
} AIS_ACC_CAPABILITIES;

typedef enum
{
    BAT_TYPE_POWERED = 0x01,
    BAT_TYPE_NON_RECHARGEABLE = 0x02,
    BAT_TYPE_RECHARGEABLE = 0x04,
} AIS_BAT_TYPE;

bool ais_set_parameter(T_AIS_PARAM_TYPE param_type, uint16_t len, void *p_value);

T_SERVER_ID accessory_info_add_service(void *p_func);

#endif
