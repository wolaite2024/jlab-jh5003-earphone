/*
 * Copyright (c) 2018, Realsil Semiconductor Corporation. All rights reserved.
 */

#ifndef _CLI_CORE_H_
#define _CLI_CORE_H_

#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* The command console welcome message. */
#define CLI_WELCOME_MESSAGE     "\r\n\r\n"                  \
    "^^^ Welcome to Realtek Terminal            ^^^\r\n"    \
    "^^^                                        ^^^\r\n"    \
    "^^^ Type help to view supported commands   ^^^\r\n"    \
    "^^^                                        ^^^\r\n"    \
    "\r\n"

/* The command console line feed. */
#define CLI_NEW_LINE            "\r\n"

/* The command CTRL-C string. */
#define CLI_CTRL_C              "^C"

/* CTRL-C acts as an end-of-file */
#define CLI_ASCII_EOF           0x03

/* SPACE acts as a blank point */
#define CLI_ASCII_SPACE         0x20

/* DEL acts as a backspace. */
#define CLI_ASCII_DEL           0x7F
#define CLI_ASCII_BS            0x08    /* '\b' */

/* Dimensions the buffer into which input characters are placed. */
#define CLI_MAX_INPUT_SIZE      120

/* Dimensions the buffer into which output characters are placed. */
#define CLI_MAX_OUTPUT_SIZE     120

/* The command console prompt buffer size. */
#define CLI_PROMPT_SIZE         120

/* The command console prompt format: "user@host:/# ". */
#define CLI_USER                "root"
#define CLI_AT                  "@"
#define CLI_HOST                "local"
#define CLI_COLON               ":"
#define CLI_DIRECTORY           "/"
#define CLI_BANG                "#"
#define CLI_SPACE               " "

/**
 * Initialize CLI interpreter core.
 */
bool cli_init(uint32_t input_buf_size,
              uint32_t output_buf_size);

/**
 * A buffer into which command inputs can be written is declared in the main
 * command interpreter, rather than in the command console implementation, to
 * allow application that provide access to the command console via multiple
 * interfaces to share a buffer, and therefore save RAM. Note, however, that
 * the command interpreter itself is not re-entrant, so only one command
 * console interface can be used at any one time. For that reason, no attempt
 * is made to provide any mutual exclusion mechanism on the output buffer.
 *
 * cli_input_buf_get() returns the address of the output buffer.
 */
char *cli_input_buf_get(void);

/**
 * A buffer into which command outputs can be written is declared in the main
 * command interpreter, rather than in the command console implementation, to
 * allow application that provide access to the command console via multiple
 * interfaces to share a buffer, and therefore save RAM. Note, however, that
 * the command interpreter itself is not re-entrant, so only one command
 * console interface can be used at any one time. For that reason, no attempt
 * is made to provide any mutual exclusion mechanism on the output buffer.
 *
 * cli_output_buf_get() returns the address of the output buffer.
 */
char *cli_output_buf_get(void);

/**
 * Runs the command interpreter for the command string "cmd_str". Any
 * output generated by running the command will be placed into p_output_buf.
 * buf_len must indicate the size in bytes of the buffer pointed to by p_output_buf.
 *
 * cli_cmd_process should be called repeatedly until it returns false.
 *
 * cli_cmd_process is not reentrant.  It must not be called from more
 * than one task - or at least - by more than one task at a time.
 */
bool cli_cmd_process(const char *cmd_str,
                     char       *output_buf,
                     size_t      buf_len);

/**
 * Echoes the command line prompt string. The prompt will be displayed
 * at the starting position of these console horizontal lines when the
 * line feed character is inputted.
 *
 * cli_prompt_echo() returns the result of prompt echoing. If there is
 * no valid prompt string prepared, it returns false.
 */
bool cli_prompt_echo(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _CLI_CORE_H_ */
