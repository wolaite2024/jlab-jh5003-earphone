/**
*****************************************************************************************
*     Copyright(c) 2017, Realtek Semiconductor Corporation. All rights reserved.
*****************************************************************************************
  * @file     bas_gatt_svc.h
  * @brief    Head file for using battery service.
  * @details  BAS data structs and external functions declaration developed based on bt_gatt_svc.h.
  * @author
  * @date
  * @version  v1.0
  * *************************************************************************************
  */

/* Define to prevent recursive inclusion */
#ifndef _BAS_GATT_SVC_H_
#define _BAS_GATT_SVC_H_

#ifdef  __cplusplus
extern "C" {
#endif      /* __cplusplus */

/* Add Includes here */
#include "bt_gatt_svc.h"


/** @defgroup BAS_GATT_SVC BAS Battery GATT Service
  * @brief  Battery service
   * @details

     The Battery Service exposes the state of a battery within a device.

     Battery Service generally makes up a profile with some other services, and it can provide the state of a battery within a device.

     The default supported feature provided by BAS is the notify property of battery level characteristic,
     and the application developers can modify the feature supported by BAS according to their own requirements.
     The specific configuration process can be achieved by modifying Macro @ref BAS_SVC_FEATURE_SUPPORT.

    * <b>Example usage</b>
    * \code{.c}

        #define BAS_BATTERY_LEVEL_NOTIFY_SUPPORT    1

    * \endcode

     Application shall register battery service when initialization through @ref bas_reg_srv function.

     Application can reply the battery level of BAS through @ref bas_battery_level_read_confirm function when receive read battery level request.

     Application can send the battery level value of BAS to the client with a notification through @ref bas_send_battery_level_notify function.

  * @{
  */

/*============================================================================*
 *                         Macros
 *============================================================================*/
/** @defgroup BAS_Exported_Macros BAS Exported Macros
  * @brief
  * @{
  */
/** @defgroup BAS_SVC_FEATURE_SUPPORT
  * @brief BAS server feature support
  * @{
  */
#define BAS_BATTERY_LEVEL_NOTIFY_SUPPORT 1
/** @} End of BAS_SVC_FEATURE_SUPPORT */

/** @defgroup BAS_SVC_CB_MSG
  * @brief BAS server callback messages
  * @{
  */
#define GATT_MSG_BAS_SERVER_READ_BATTERY_LEVEL_IND  0x00
#define GATT_MSG_BAS_SERVER_CCCD_UPDATE             0x01
/** @} End of BAS_SVC_CB_MSG */

/** @defgroup BAS_SVC_UUID
  * @brief BAS service UUID
  * @{
  */
#define GATT_UUID_BATTERY                0x180F
#define GATT_UUID_CHAR_BAS_LEVEL         0x2A19
/** @} End of BAS_SVC_UUID */
/** End of BAS_Exported_Macros
* @}
*/

/*============================================================================*
 *                         Types
 *============================================================================*/
/** @defgroup BAS_Exported_Types BAS Exported Types
  * @brief
  * @{
  */
/**
 * @brief P_FUN_BAS_SERVER_APP_CB BAS Server Callback Function Point Definition Function
 *        pointer used in BAS server module, to send events to specific server module.
 *        The events @ref BAS_SVC_CB_MSG.
 */
typedef T_APP_RESULT(*P_FUN_BAS_SERVER_APP_CB)(uint16_t conn_handle, uint16_t cid, uint8_t type,
                                               void *p_data);

/** @brief BAS server read ind
 *         The message data for GATT_MSG_BAS_SERVER_READ_BATTERY_LEVEL_IND.
*/
typedef struct
{
    T_SERVER_ID service_id;
} T_BAS_SERVER_READ_BATTERY_LEVEL_IND;

/** @brief BAS server cccd data update info
 *         The message data for GATT_MSG_BAS_SERVER_CCCD_UPDATE.
*/
typedef struct
{
    T_SERVER_ID service_id;
    uint16_t char_uuid;
    uint16_t cccd_cfg;
} T_BAS_SERVER_CCCD_UPDATE;

/** End of BAS_Exported_Types
* @}
*/

/*============================================================================*
 *                         Functions
 *============================================================================*/
/** @defgroup BAS_Exported_Functions BAS Exported Functions
  * @brief
  * @{
  */

/**
 * @brief       Add battery service to the BLE stack database.
 *
 *
 * @param[in]   app_cb     Callback when service attribute was read, write or cccd update.
 * @return Service id generated by the BLE stack: @ref T_SERVER_ID.
 * @retval 0xFF Operation failure.
 * @retval Others Service id assigned by stack.
 *
 * <b>Example usage</b>
 * \code{.c}
    void profile_init(uint16_t mode, uint8_t svc_num)
    {
         gatt_svc_init(mode, svc_num);
         bas_id = bas_reg_srv(app_bas_service_callback);
    }
 * \endcode
 */
T_SERVER_ID bas_reg_srv(P_FUN_BAS_SERVER_APP_CB app_cb);

#if BAS_BATTERY_LEVEL_NOTIFY_SUPPORT
/**
 * @brief       Send notify battery level notification data .
 *
 *
 * @param[in]   conn_handle    Connection handle of the ACL link.
 * @param[in]   service_id     Service id.
 * @param[in]   battery_level  The current charge level of a battery.
                               Unit is org.bluetooth.unit.percentage. Minimum value is 0, and maximum value is 100.
                               100% represents fully charged while 0% represents fully discharged.
 * @return Operation result.
 * @retval true Operation success.
 * @retval false Operation failure.
 *
 * <b>Example usage</b>
 * \code{.c}
    void test(void)
    {
        uint8_t battery_level = 90;
        bas_send_battery_level_notify(conn_handle, bas_id, battery_level);
    }
 * \endcode
 */
bool bas_send_battery_level_notify(uint16_t conn_handle,
                                   uint8_t service_id, uint8_t battery_level);
#endif

/**
 * @brief       Confirm for read battery level value request.
 *              If application accepts the read request, application shall return APP_RESULT_PENDING or
 *              APP_RESULT_SUCCESS when receive GATT_MSG_BAS_SERVER_READ_BATTERY_LEVEL_IND,
 *              and call this API later.
 *
 * @param[in]   conn_handle    Connection handle of the ACL link.
 * @param[in]   cid            Local CID assigned by Bluetooth stack.
 * @param[in]   service_id     Service id.
 * @param[in]   battery_level  The current charge level of a battery.
                               Unit is org.bluetooth.unit.percentage. Minimum value is 0, and maximum value is 100.
                               100% represents fully charged while 0% represents fully discharged.

 * @return Operation result.
 * @retval true Operation success.
 * @retval false Operation failure.
 *
 * <b>Example usage</b>
 * \code{.c}
    void test(void)
    {
        uint8_t battery_level = 90;
        bas_battery_level_read_confirm(conn_handle, cid, bas_id, battery_level);
    }
 * \endcode
 */
bool bas_battery_level_read_confirm(uint16_t conn_handle, uint16_t cid,
                                    uint8_t service_id, uint8_t battery_level);

/** @} End of BAS_Exported_Functions */

/** @} End of BAS_GATT_SVC */


#ifdef  __cplusplus
}
#endif      /*  __cplusplus */

#endif  /* _BAS_GATT_SVC_H_ */
