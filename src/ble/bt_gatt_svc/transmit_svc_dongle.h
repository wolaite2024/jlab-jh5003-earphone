/**
*****************************************************************************************
*     Copyright(c) 2015, Realtek Semiconductor Corporation. All rights reserved.
*****************************************************************************************
  * @file     transmit_svc_dongle.h
  * @brief    Head file for using dualmode service.
  * @details
  * @author   wade
  * @date     2023-9-4
  * @version  v0.1
  * *************************************************************************************
  */

/* Define to prevent recursive inclusion */
#ifndef _TRANSMIT_SVC_DONGLE_H_
#define _TRANSMIT_SVC_DONGLE_H_

#ifdef  __cplusplus
extern "C" {
#endif      /* __cplusplus */

/* Add Includes here */
#include "bt_gatt_svc.h"

/** @defgroup TRANSMIT_SERVICE_DONGLE Transmit Service
  * @brief Transmit service
  * @details

    The Transmit Service Dongle is a user-defined service, it is used to help transmit data for dongle-only.

    Application shall registger transmit service when initialization through @ref transmit_srv_dongle_add function.

    Application can send data through @ref transmit_srv_dongle_tx_data function.

  * <b>Example usage</b>
  * \code{.c}
     void app_transmit_data(uint8_t conn_id, T_SERVER_ID srv_id, uint8_t *tx_data)
     {
        ...
        //transmit data
        transmit_srv_dongle_tx_data(conn_id, srv_id, sizeof(tx_data), tx_data);
        ...
  *  }
  * \endcode

  * @{
  */
/*============================================================================*
 *                              Macros
 *============================================================================*/
/** @defgroup TRANSMIT_SERVICE_DONGLE_Exported_Macros Transmit Service Exported Macros
  * @brief
  * @{
  */

/** @defgroup TRANSMIT_SERVICE_DONGLE_Upstream_Message TRANSMIT_SERVICE_DONGLE Upstream Message
  * @brief  Upstream message used to inform application.
  * @{
  */
#define TRANSMIT_SVC_DONGLE_TX_DATA_CCCD_ENABLE  1
#define TRANSMIT_SVC_DONGLE_TX_DATA_CCCD_DISABLE  2

#define TRANSMIT_SVC_DONGLE_RX_DATA_INDEX              2 /**< @brief Index for Transmit Service rx chars's value */
#define TRANSMIT_SVC_DONGLE_TX_DATA_INDEX              4 /**< @brief Index for Transmit Service tx chars's value */
#define TRANSMIT_SVC_DONGLE_TX_DATA_CCCD_INDEX         5 /**< @brief Index for Transmit Service tx chars's CCCD value */
#define TRANSMIT_SVC_DONGLE_DEVICE_INFO_INDEX          7 /**< @brief Index for Transmit Service device info chars's value */

#define TRANSMIT_SVC_DONGLE_DEVICE_INFO_MAX_NAME_LEN   40 /**< @brief max name length for ble device info */
/** @} End of TRANSMIT_SERVICE_DONGLE_Upstream_Message */

/** @} End of TRANSMIT_SERVICE_DONGLE_Exported_Macros */

/*============================================================================*
 *                              Types
 *============================================================================*/
/** @defgroup TRANSMIT_SERVICE_DONGLE_Exported_Types Transmit Service Exported Types
  * @brief
  * @{
  */
/* Add all public types here */
/** @defgroup TRANSMIT_SERVICE_DONGLE_Callback_Data Transmit Service Callback Data
  * @brief Transmit service data struct for notification data to application.
  * @{
  */
typedef struct
{
    uint16_t len;
    uint8_t *p_value;
} T_RX_SRV_DATA;

typedef enum
{
    DEVICE_TYPE_NO,
    DEVICE_TYPE_DONGLE,
} T_TRANSMIT_SRV_DONGLE_DEVICE_TYPE;

typedef struct
{
    uint8_t  bd_addr[6];
    uint8_t  device_type;
    uint8_t  res;
    uint8_t  device_name[TRANSMIT_SVC_DONGLE_DEVICE_INFO_MAX_NAME_LEN];
} T_TRANSMIT_SRV_DONGLE_DEVICE_INFO;

/** Message content: @ref TRANSMIT_SERVICE_DONGLE_Upstream_Message */
typedef union
{
    uint8_t notification_indification_value;
    T_RX_SRV_DATA rx_data;
    T_TRANSMIT_SRV_DONGLE_DEVICE_INFO device_info;
} T_TRANSMIT_SRV_DONGLE_MSG_DATA;

/** Transmit service data to inform application */
typedef struct
{
    uint16_t                conn_handle;
    uint16_t                cid;
    uint8_t                 attr_index;
    uint8_t                 conn_id;
    T_SERVICE_CALLBACK_TYPE msg_type;
    T_TRANSMIT_SRV_DONGLE_MSG_DATA msg_data;
} T_TRANSMIT_SRV_DONGLE_CALLBACK_DATA;
/** @} */

/** @} End of TRANSMIT_SERVICE_DONGLE_Exported_Types */
/*============================================================================*
 *                              Functions
 *============================================================================*/
/** @defgroup TRANSMIT_SERVICE_DONGLE_Exported_Functions Transmit Service Exported Functions
  * @brief
  * @{
  */

/**
  * @brief Add transmit service to the BLE stack database.
  *
  * @param[in]   p_func_cb  Callback when service attribute was read, write or cccd update.
  * @return Service id generated by the BLE stack: @ref T_SERVER_ID.
  * @retval 0xFF Operation failure.
  * @retval others Service id assigned by stack.
  *
  */
T_SERVER_ID transmit_srv_dongle_add(void *p_func_cb);

/**
  * @brief transmit data.
  *
  * @param[in] conn_handle  connection handle.
  * @param[in] len length of report data.
  * @param[in] p_value report value pointer.
  * @return transmit result
  * @retval 1 TRUE
  * @retval 0 FALSE
  */
bool transmit_srv_dongle_tx_data(uint8_t conn_handle, uint16_t len, uint8_t *p_value);

/** @} End of TRANSMIT_SERVICE_DONGLE_Exported_Functions */

/** @} End of TRANSMIT_SERVICE_DONGLE */


#ifdef  __cplusplus
}
#endif      /*  __cplusplus */

#endif  /* _TRANSMIT_SVC_DONGLE_H_ */
